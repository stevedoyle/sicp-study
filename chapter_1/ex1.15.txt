(sine 12.15)
(p (sine 4.05))
(p (p (sine 1.35)))
(p (p (p (sine 0.45))))
(p (p (p (p (sine 0.15)))))
(p (p (p (p (p (sine 0.05))))))
(p (p (p (p (p 0.05)))))

=> p is applied 5 times.

The order of growth in terms of number of steps and space can be 
measured by the number of times p is applied.

In the algorithm, p is applied until the initial argument successively 
divided by 3 becomes less than 0.1. In other words:

    a/(3^n) < 0.1 ... where a is the initial argument and n is the 
                      number of times p gets applied
    a/0.1 < 3^n
    log3(a/0.1) < log3(3^n) .... where log3 is the log to base 3
    log3(a/0.1) < n log3(3)
    log3(a/0.1) < n .... since log3(3) = 1

Since n must be an integer, this becomes the ceiling of the left hand 
side where the ceiling represents the next larger integer number, i.e. :
    
    ceiling( log3(a/0.1) )

To simplify calculations, we change change the base of the logarithm 
to something more usable in most languages:

    ceiling( log3(a/0.1) ) = ceiling( log(a/0.1) / log(3) )

or in scheme, since that is what we are studying after all:

    (ceiling(/ (log (/ a 0.1)) (log 3))) 

Checking our earlier answer for part (a):

    (ceiling(/ (log (/ 12.15 0.1)) (log 3))) = 5.0

